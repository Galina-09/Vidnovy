import React, { useState } from 'react';
import { X, Upload, MapPin, Calculator } from 'lucide-react';

interface AddObjectModalProps {
  onClose: () => void;
  onSuccess: () => void;
}

const AddObjectModal: React.FC<AddObjectModalProps> = ({ onClose, onSuccess }) => {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    type: 'residential',
    address: '',
    estimatedCost: '',
    priority: 'medium',
    images: [] as File[]
  });

  const objectTypes = [
    { id: 'school', label: '–®–∫–æ–ª–∞', icon: 'üè´' },
    { id: 'hospital', label: '–õ—ñ–∫–∞—Ä–Ω—è', icon: 'üè•' },
    { id: 'residential', label: '–ñ–∏—Ç–ª–æ–≤–∏–π –±—É–¥–∏–Ω–æ–∫', icon: 'üè†' },
    { id: 'infrastructure', label: '–Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', icon: 'üèóÔ∏è' },
    { id: 'cultural', label: '–ö—É–ª—å—Ç—É—Ä–Ω–∏–π –æ–±\'—î–∫—Ç', icon: 'üèõÔ∏è' }
  ];

  const priorities = [
    { id: 'low', label: '–ù–∏–∑—å–∫–∏–π', color: 'text-green-600' },
    { id: 'medium', label: '–°–µ—Ä–µ–¥–Ω—ñ–π', color: 'text-yellow-600' },
    { id: 'high', label: '–í–∏—Å–æ–∫–∏–π', color: 'text-orange-600' },
    { id: 'critical', label: '–ö—Ä–∏—Ç–∏—á–Ω–∏–π', color: 'text-red-600' }
  ];

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    setFormData(prev => ({ ...prev, images: [...prev.images, ...files] }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    console.log('Submitting:', formData);
    onSuccess();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="sticky top-0 bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between rounded-t-2xl">
          <h2 className="text-2xl font-bold text-gray-900">–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç</h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X className="w-6 h-6 text-gray-600" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* Title */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ù–∞–∑–≤–∞ –æ–±'—î–∫—Ç–∞ *
            </label>
            <input
              type="text"
              required
              value={formData.title}
              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –®–∫–æ–ª–∞ ‚Ññ15 —ñ–º–µ–Ω—ñ –¢–∞—Ä–∞—Å–∞ –®–µ–≤—á–µ–Ω–∫–∞"
            />
          </div>

          {/* Type */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –¢–∏–ø –æ–±'—î–∫—Ç–∞ *
            </label>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
              {objectTypes.map((type) => (
                <button
                  key={type.id}
                  type="button"
                  onClick={() => setFormData(prev => ({ ...prev, type: type.id }))}
                  className={`p-3 border rounded-lg text-left transition-all ${
                    formData.type === type.id
                      ? 'border-blue-500 bg-blue-50 text-blue-700'
                      : 'border-gray-300 hover:border-blue-300'
                  }`}
                >
                  <div className="text-2xl mb-1">{type.icon}</div>
                  <div className="text-sm font-medium">{type.label}</div>
                </button>
              ))}
            </div>
          </div>

          {/* Address */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ê–¥—Ä–µ—Å–∞ *
            </label>
            <div className="relative">
              <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                required
                value={formData.address}
                onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 25, –ö–∏—ó–≤"
              />
            </div>
          </div>

          {/* Description */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –û–ø–∏—Å –ø–æ—à–∫–æ–¥–∂–µ–Ω—å *
            </label>
            <textarea
              required
              rows={4}
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ—à–∫–æ–¥–∂–µ–Ω—å, —ó—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ç–∞ –æ–±—Å—è–≥..."
            />
          </div>

          {/* Priority */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç *
            </label>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              {priorities.map((priority) => (
                <button
                  key={priority.id}
                  type="button"
                  onClick={() => setFormData(prev => ({ ...prev, priority: priority.id }))}
                  className={`p-3 border rounded-lg text-center transition-all ${
                    formData.priority === priority.id
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-300 hover:border-blue-300'
                  }`}
                >
                  <div className={`font-medium ${priority.color}`}>
                    {priority.label}
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* Estimated Cost */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
            </label>
            <div className="relative">
              <Calculator className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="number"
                value={formData.estimatedCost}
                onChange={(e) => setFormData(prev => ({ ...prev, estimatedCost: e.target.value }))}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="250000"
              />
              <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">
                ‚Ç¥
              </div>
            </div>
            <p className="text-sm text-gray-500 mt-1">
              –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
            </p>
          </div>

          {/* Image Upload */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –ø–æ—à–∫–æ–¥–∂–µ–Ω—å
            </label>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors">
              <Upload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
              <p className="text-gray-600 mb-2">–ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å —Ñ–∞–π–ª–∏ —Å—é–¥–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –≤–∏–±–æ—Ä—É</p>
              <input
                type="file"
                multiple
                accept="image/*"
                onChange={handleImageUpload}
                className="hidden"
                id="image-upload"
              />
              <label
                htmlFor="image-upload"
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors cursor-pointer inline-block"
              >
                –í–∏–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª–∏
              </label>
            </div>
            {formData.images.length > 0 && (
              <div className="mt-3">
                <p className="text-sm text-gray-600">
                  –í–∏–±—Ä–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤: {formData.images.length}
                </p>
              </div>
            )}
          </div>

          {/* Submit Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 pt-6 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 border border-gray-300 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-50 transition-colors"
            >
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </button>
            <button
              type="submit"
              className="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-3 rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all shadow-lg hover:shadow-xl"
            >
              –î–æ–¥–∞—Ç–∏ –æ–±'—î–∫—Ç
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddObjectModal;